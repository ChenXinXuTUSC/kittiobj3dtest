import os
import os.path as osp
import logging


def get_logger(logger_name: str, to_file: bool=False, log_file: str=""):
    # generated by DeepSeek


    logging.addLevelName(logging.DEBUG, "DBUG")
    logging.addLevelName(logging.INFO, "INFO")
    logging.addLevelName(logging.WARNING, "WARN")
    logging.addLevelName(logging.ERROR, "ERRO")
    logging.addLevelName(logging.CRITICAL, "FATL")

    # 创建一个日志记录器
    logger = logging.getLogger(logger_name)
    logger.setLevel(logging.DEBUG)  # 设置日志级别

    # 创建一个格式化器，定义日志的输出格式
    formatter = logging.Formatter(
        '[%(asctime)s|%(name)s|%(levelname)s] %(message)s',
        datefmt='%Y-%m-%d %H:%M:%S'
    )

    # 创建一个控制台处理器，并将日志级别设置为 DEBUG
    console_handler = logging.StreamHandler()
    console_handler.setLevel(logging.DEBUG)
    console_handler.setFormatter(formatter)
    logger.addHandler(console_handler)

    # 创建一个文件处理器，并将日志级别设置为 DEBUG

    if to_file:
        log_dir = osp.dirname(log_file)
        if not osp.exists(log_dir):
            os.makedirs(log_dir)
        if not osp.exists(log_dir):
            raise FileNotFoundError
        
        file_handler = logging.FileHandler(log_file)
        file_handler.setLevel(logging.DEBUG)
        file_handler.setFormatter(formatter)
        logger.addHandler(file_handler)


    # 将格式化器添加到处理器中

    # 将处理器添加到日志记录器中

    return logger
